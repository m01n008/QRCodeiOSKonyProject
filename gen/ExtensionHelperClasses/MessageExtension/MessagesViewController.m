//
//  MessagesViewController.m
//  notestickers
//
//  Created by Satya.bobba on 12/11/16.
//  Copyright Â© 2016 Satya.bobba. All rights reserved.
//

#import "MessagesViewController.h"


@interface MessagesViewController ()

@end

@implementation MessagesViewController

- (void)viewDidLoad{
    [super viewDidLoad];
    
    
    [konyExtensionsRuntime executeCallback:@"viewDidLoad"];
}
    
    
- (void)loadView{
    [super loadView];
    [[NSNotificationCenter defaultCenter]  addObserver:self selector:@selector(postExtensionContextToJS:) name:@"getextensionContext" object:nil];
    [[NSNotificationCenter defaultCenter]  addObserver:self selector:@selector(postViewToJS:) name:@"getView" object:nil];
    [konyExtensionsRuntime setup:self];
    [konyExtensionsRuntime executeCallback:@"loadView"];
}
    
- (void)didReceiveMemoryWarning{
    [konyExtensionsRuntime executeCallback:@"didReceiveMemoryWarning"];
    [super didReceiveMemoryWarning];
}
    
    // Called when the view is about to made visible. Default does nothing
- (void)viewWillAppear:(BOOL)animated{
    [konyExtensionsRuntime executeCallback:@"viewWillAppear"];
    [super viewWillAppear:animated];
}
    
    // Called when the view has been fully transitioned onto the screen. Default does nothing
- (void)viewDidAppear:(BOOL)animated{
    [konyExtensionsRuntime executeCallback:@"viewDidAppear"];
    [super viewDidAppear:animated];
}
    
    // Called when the view is dismissed, covered or otherwise hidden. Default does nothing
- (void)viewWillDisappear:(BOOL)animated{
    [konyExtensionsRuntime executeCallback:@"viewWillDisappear"];
    [super viewWillDisappear:animated];
}
    
    // Called after the view was dismissed, covered or otherwise hidden. Default does nothing
- (void)viewDidDisappear:(BOOL)animated{
    [konyExtensionsRuntime executeCallback:@"viewDidDisappear"];
    [super viewDidDisappear:animated];
}
    
- (void)presentViewController:(UIViewController*)viewControllerToPresent{
    [self presentViewController:(UIViewController*)viewControllerToPresent animated:true completion:NULL];
}
    
-(void)postExtensionContextToJS:(NSNotification*) notification{
    NSDictionary * info =[NSDictionary dictionaryWithObject:[self extensionContext] forKey:@"value"];
    [[NSNotificationCenter defaultCenter] postNotificationName:@"postExtensionContextValue" object:NULL userInfo:info];
}
-(void)postViewToJS:(NSNotification*)notification{
    NSDictionary * info =[NSDictionary dictionaryWithObject:[self view] forKey:@"value"];
    [[NSNotificationCenter defaultCenter] postNotificationName:@"postViewValue" object:NULL userInfo:info];
}


#pragma mark - Conversation Handling

-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    
    // Use this method to configure the extension and restore previously stored state.
    NSLog(@"%@", NSStringFromSelector(_cmd));
    [konyExtensionsRuntime executeCallback:@"didBecomeActiveWithConversation" withArg:@[conversation]];

}

-(void)willResignActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
    [konyExtensionsRuntime executeCallback:@"willResignActiveWithConversation" withArg:@[conversation]];

}

-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    
    // Use this method to trigger UI updates in response to the message.
     NSLog(@"%@", NSStringFromSelector(_cmd));
    [konyExtensionsRuntime executeCallback:@"didReceiveMessageCconversation" withArg:@[message,conversation]];

}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
    [konyExtensionsRuntime executeCallback:@"didStartSendingMessageConversation" withArg:@[message,conversation]];

}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.
    
    // Use this to clean up state related to the deleted message.
    [konyExtensionsRuntime executeCallback:@"didCancelSendingMessageConversation" withArg:@[message,conversation]];
}

-(void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called before the extension transitions to a new presentation style.
    
    // Use this method to prepare for the change in presentation style.
   
    [konyExtensionsRuntime executeCallback:@"willTransitionToPresentationStyle" withArg:@[[NSNumber numberWithInt:presentationStyle]]];
}

-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called after the extension transitions to a new presentation style.
    
    // Use this method to finalize any behaviors associated with the change in presentation style.
    [konyExtensionsRuntime executeCallback:@"didTransitionToPresentationStyle" withArg:@[[NSNumber numberWithInt:presentationStyle]]];
}



@end
