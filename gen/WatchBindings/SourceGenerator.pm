#!/usr/bin/perl -w

package SourceGenerator;

use strict;
use Data::Dumper;
use FormModel;

sub new
{
    my ($class) = @_;
    my $self = [];
    bless $self, $class;
    return $self;
}


sub getFileHeader {

	my ($controllerName, $formModel) = @_;

	my $templateImportsStatements = "";
	if ($formModel->can("getTemplateImportsForForm")) {
		my $templateImportsHashRef = $formModel->getTemplateImportsForForm();
		if (defined $templateImportsHashRef) {
			while ( my ($templateId, $flag) = each %$templateImportsHashRef ) {
				$templateImportsStatements .= "\n#import \"$templateId"."Controller.h\"";
    		}
		}	
	}
	
	my $SwiftBridgeHeaderImport .= "\n#import \"KWatchOS2_Extension-Swift.h\"";
	
  	return "//\
//  $controllerName.m\
//\
//  Generated by Watch ObjC-Template generator.\
//  Do not modify this file.\
//  Copyright (c) 2016 Kony Solutions. All rights reserved.\
//\
\
#import \"$controllerName.h\"$templateImportsStatements$SwiftBridgeHeaderImport\
\
\@interface $controllerName ()\
\
\@end\
\
";
}

sub getLifeCycleMethods {
	my ($formModel) = @_;
	my $LIFE_CYCLE_METHODS = "";
	
	my $init = $formModel->getFormattedValueForKey("onInit");
	
	if (defined $init) {
		$LIFE_CYCLE_METHODS .= "- (instancetype)init {\
    self = [super init];\
    [SwiftCallbacksBridge $init:self];\
    return self;\
}\
\
";
	}#  elsif ($formModel->can("isStartupForm") && $formModel->isStartupForm()){
# 		$init  = "Intial_Dummy_Method";
# 		$LIFE_CYCLE_METHODS .= "- (instancetype)init {\
#     self = [super init];\
#     [SwiftCallbacksBridge executeMethod:@\"$init: self];\
#     return self;\
# }\
# \
# ";
# 	}
	
	my $awake = $formModel->getFormattedValueForKey("onAwake");
	
	if (defined $awake) {
		$LIFE_CYCLE_METHODS .= "- (void)awakeWithContext:(nullable id)context {\
    [super awakeWithContext:context];\
    [SwiftCallbacksBridge $awake:self :context];\
}\
\
";
	}
	
	my $willActivate = $formModel->getFormattedValueForKey("onWillActivate");
	
	if (defined $willActivate) {
		$LIFE_CYCLE_METHODS .= "- (void)willActivate {\
    [super willActivate];\
    [SwiftCallbacksBridge $willActivate:self];\
}\
\
";
	}
	
	my $didDeactivate = $formModel->getFormattedValueForKey("onDidDeactivate");
	
	if (defined $didDeactivate) {
		$LIFE_CYCLE_METHODS .= "- (void)didDeactivate {\
    [super didDeactivate];\
    [SwiftCallbacksBridge $didDeactivate:self];\
}";
	}
    
    my $didAppear = $formModel->getFormattedValueForKey("didAppear");
        
    if (defined $didAppear) {
        $LIFE_CYCLE_METHODS .= "- (void) didAppear {\
    [super didAppear];\
    [SwiftCallbacksBridge $didAppear:self];\
}\
\
";
    }
    
    my $offsetScrollToTop = $formModel->getFormattedValueForKey("interfaceOffsetDidScrollToTop");
        
    if (defined $offsetScrollToTop) {
        $LIFE_CYCLE_METHODS .= "- (void) interfaceOffsetDidScrollToTop {\
    [SwiftCallbacksBridge $offsetScrollToTop:self];\
}\
\
";
    }
    
    my $offsetScrollToBottom = $formModel->getFormattedValueForKey("interfaceOffsetDidScrollToBottom");
        
    if (defined $offsetScrollToBottom) {
        $LIFE_CYCLE_METHODS .= "- (void) interfaceOffsetDidScrollToBottom {\
    [SwiftCallbacksBridge $offsetScrollToBottom:self];\
}\
\
";
    }

	my $scrollToTop = $formModel->getFormattedValueForKey("interfaceDidScrollToTop");
        
    if (defined $scrollToTop) {
        $LIFE_CYCLE_METHODS .= "- (void) interfaceDidScrollToTop {\
    [SwiftCallbacksBridge $scrollToTop:self];\
}\
\
";
    }
	
	return $LIFE_CYCLE_METHODS;
}

sub getOutletSynthesizers {
	my $formModel = shift @_;
	my $synthesizersList = "";
	
	my $outletsArrayRef = $formModel->getFormattedValueForKey("outlets");
	for my $outletHashRef (@$outletsArrayRef) {
		my $outletID = $outletHashRef->{"property"};
		$synthesizersList .= "\@synthesize $outletID;\n";	
	}
	
	return $synthesizersList;
}

sub getOutletActionMethods {
	my ($formModel) = @_;
	my $OUTLET_ACTION_METHODS = "";
	
	my $selectorsHashRef = $formModel->getFormattedValueForKey("selectors");
	if (defined $selectorsHashRef) {
		while ( my ($selectorName, $selectorHashRef) = each %$selectorsHashRef ) {
			my $JSMethod = $selectorHashRef->{"JSMethod"};
			my $wType = $selectorHashRef->{"wType"};
		
			if ($wType eq "Slider") {
				$OUTLET_ACTION_METHODS .= "- (IBAction)$selectorName(float)value {\
	[SwiftCallbacksBridge $JSMethod:self :value];\
}\
\
";
			} elsif ($wType eq "Switch") {
				$OUTLET_ACTION_METHODS .= "- (IBAction)$selectorName(BOOL)value {\
	[SwiftCallbacksBridge $JSMethod:self :value];\
}\
\
";
			} else {
				$OUTLET_ACTION_METHODS .= "- (IBAction)$selectorName {\
	[SwiftCallbacksBridge $JSMethod:self];\
}\
\
";
			}
		}
	}
	
	return $OUTLET_ACTION_METHODS;
}

sub createDidSelectRowAtIndexMethod {	
	my ($formModel) = @_;
	
	my $didSelectRowCode = '';
	my $onRowClickArrayRef = $formModel->getFormattedValueForKey("onRowClick");
	
	if (defined $onRowClickArrayRef) {
		$didSelectRowCode .= "- (void)table:(WKInterfaceTable *)table didSelectRowAtIndex:(NSInteger)rowIndex {\n";
		
		my $else = '';
		for my $onRowClickHashRef (@$onRowClickArrayRef) {
			my $tableId = $onRowClickHashRef->{"tableId"};
			my $rowClickJSMethod = $onRowClickHashRef->{"rowClickJSMethod"};
			$didSelectRowCode .= "\t$else"."if (table == self.$tableId) {\
        [SwiftCallbacksBridge $rowClickJSMethod:self :table :rowIndex];\
    }";
    		$else .= 'else ';
		}
		
		$didSelectRowCode .= "\n}";
	}
	
	return $didSelectRowCode;
}

sub createDidReceiveLocalNotificationMethod {
	my ($formModel) = @_;
	
	my $localNotificationCode = '';
	my $onLocalNotificationReceived = $formModel->getFormattedValueForKey("onLocalNotificationReceived");
	
	if (defined $onLocalNotificationReceived) {
		$localNotificationCode .= "- (void)didReceiveLocalNotification:(UILocalNotification *)localNotification withCompletion:(void (^)(WKUserNotificationInterfaceType))completionHandler {\
    [SwiftCallbacksBridge $onLocalNotificationReceived:self :localNotification :completionHandler];\
}";
	}
	
	return $localNotificationCode;
}

sub createDidReceiveRemoteNotificationMethod {
	my ($formModel) = @_;
	
	my $remoteNotificationCode = '';
	my $onRemoteNotificationReceived = $formModel->getFormattedValueForKey("onRemoteNotificationReceived");
	
	if (defined $onRemoteNotificationReceived) {
		$remoteNotificationCode .= "- (void)didReceiveRemoteNotification:(NSDictionary *)remoteNotification withCompletion:(void (^)(WKUserNotificationInterfaceType))completionHandler {\
    [SwiftCallbacksBridge $onRemoteNotificationReceived:self :remoteNotification :completionHandler];\
}";
	}
	
	return $remoteNotificationCode;
}

sub createHandleNotificationActionMethods {
	my ($formModel) = @_;
	
	my $handleNotificationActionsCode = "";
	if ($formModel->can("isStartupForm") && $formModel->isStartupForm()) {
		
		my $localAction = $formModel->getFormattedValueForKey("localNotificationActionHandler");
		if (defined $localAction) {
			$handleNotificationActionsCode .= "- (void)handleActionWithIdentifier:(NSString *)identifier forLocalNotification:(UILocalNotification *)localNotification {\
    [SwiftCallbacksBridge $localAction:self :identifier :localNotification];\
}\
\
";
		}
		
		my $remoteAction = $formModel->getFormattedValueForKey("remoteNotificationActionHandler");
		if (defined $remoteAction) {
			$handleNotificationActionsCode .= "- (void)handleActionWithIdentifier:(NSString *)identifier forRemoteNotification:(NSDictionary *)remoteNotification {\
    [SwiftCallbacksBridge $remoteAction:self :identifier :remoteNotification];\
}";
		}
	}
	
	return $handleNotificationActionsCode;
}

sub getClassBody {
	my ($fileName, $formModel) = @_;
	my $lifeCycleMethods = getLifeCycleMethods($formModel);
	my $didSelectRowMethod = createDidSelectRowAtIndexMethod($formModel);
	my $didRcvLocalNotificationCode = createDidReceiveLocalNotificationMethod($formModel);
	my $didRcvRemoteNotificationCode = createDidReceiveRemoteNotificationMethod($formModel);
	my $handleNotificationActionCode = createHandleNotificationActionMethods($formModel);
 	my $outletActionMethods = getOutletActionMethods($formModel);
	my $synthesizers = getOutletSynthesizers($formModel);
	return "\
\@implementation $fileName\
\
$synthesizers\
\
$lifeCycleMethods\
\
$didSelectRowMethod\
\
$didRcvLocalNotificationCode\
\
$didRcvRemoteNotificationCode\
\
$handleNotificationActionCode\
\
$outletActionMethods\
\
\@end
\
";
}


sub generateSourceForFormModel {
	my ($self, $formModel) = @_;
	my $SOURCE_FILE_CONTENT = "";
	
	my $controllerName = $formModel->getFormattedValueForKey("customclass");
	my $sourceFileName = $controllerName.".m";
#  	print "Source file name is $sourceFileName\n";
	open SOURCE_FILE, ">WatchBindings/WatchGeneratedSources/$sourceFileName" or die "Can't open Source file $sourceFileName";
	
	$SOURCE_FILE_CONTENT .= getFileHeader($controllerName, $formModel);
#  	print $SOURCE_FILE_CONTENT;

	$SOURCE_FILE_CONTENT .= getClassBody($controllerName, $formModel);
#  	print $SOURCE_FILE_CONTENT;

 	print SOURCE_FILE $SOURCE_FILE_CONTENT;
 	
 	return $sourceFileName;
}

1;
