if (strcmp(type, @encode(JustWidthDeltaEntry)) == 0) {
		JustWidthDeltaEntry returnValue = value.toJustWidthDeltaEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(MortLigatureSubtable)) == 0) {
		MortLigatureSubtable returnValue = value.toMortLigatureSubtable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(MorxRearrangementSubtable)) == 0) {
		MorxRearrangementSubtable returnValue = value.toMorxRearrangementSubtable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(MortInsertionSubtable)) == 0) {
		MortInsertionSubtable returnValue = value.toMortInsertionSubtable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(TrakTable)) == 0) {
		TrakTable returnValue = value.toTrakTable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KerxStateEntry)) == 0) {
		KerxStateEntry returnValue = value.toKerxStateEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(SFNTLookupBinarySearchHeader)) == 0) {
		SFNTLookupBinarySearchHeader returnValue = value.toSFNTLookupBinarySearchHeader;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KerxCoordinateAction)) == 0) {
		KerxCoordinateAction returnValue = value.toKerxCoordinateAction;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(STXHeader)) == 0) {
		STXHeader returnValue = value.toSTXHeader;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(STHeader)) == 0) {
		STHeader returnValue = value.toSTHeader;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(JustPCDuctilityAction)) == 0) {
		JustPCDuctilityAction returnValue = value.toJustPCDuctilityAction;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(MortRearrangementSubtable)) == 0) {
		MortRearrangementSubtable returnValue = value.toMortRearrangementSubtable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(STXEntryTwo)) == 0) {
		STXEntryTwo returnValue = value.toSTXEntryTwo;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(JustPCConditionalAddAction)) == 0) {
		JustPCConditionalAddAction returnValue = value.toJustPCConditionalAddAction;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(PropLookupSegment)) == 0) {
		PropLookupSegment returnValue = value.toPropLookupSegment;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(OpbdSideValues)) == 0) {
		OpbdSideValues returnValue = value.toOpbdSideValues;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KerxControlPointAction)) == 0) {
		KerxControlPointAction returnValue = value.toKerxControlPointAction;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KerxOrderedListEntry)) == 0) {
		KerxOrderedListEntry returnValue = value.toKerxOrderedListEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(TrakTableEntry)) == 0) {
		TrakTableEntry returnValue = value.toTrakTableEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(STEntryOne)) == 0) {
		STEntryOne returnValue = value.toSTEntryOne;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KerxAnchorPointAction)) == 0) {
		KerxAnchorPointAction returnValue = value.toKerxAnchorPointAction;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KernKerningPair)) == 0) {
		KernKerningPair returnValue = value.toKernKerningPair;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(ALMXGlyphEntry)) == 0) {
		ALMXGlyphEntry returnValue = value.toALMXGlyphEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(STEntryZero)) == 0) {
		STEntryZero returnValue = value.toSTEntryZero;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(STXEntryZero)) == 0) {
		STXEntryZero returnValue = value.toSTXEntryZero;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(ROTAGlyphEntry)) == 0) {
		ROTAGlyphEntry returnValue = value.toROTAGlyphEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(MorxLigatureSubtable)) == 0) {
		MorxLigatureSubtable returnValue = value.toMorxLigatureSubtable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KerxControlPointEntry)) == 0) {
		KerxControlPointEntry returnValue = value.toKerxControlPointEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KernOrderedListEntry)) == 0) {
		KernOrderedListEntry returnValue = value.toKernOrderedListEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(LtagStringRange)) == 0) {
		LtagStringRange returnValue = value.toLtagStringRange;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(AnkrTable)) == 0) {
		AnkrTable returnValue = value.toAnkrTable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(JustPCGlyphRepeatAddAction)) == 0) {
		JustPCGlyphRepeatAddAction returnValue = value.toJustPCGlyphRepeatAddAction;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(MortContextualSubtable)) == 0) {
		MortContextualSubtable returnValue = value.toMortContextualSubtable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(JustTable)) == 0) {
		JustTable returnValue = value.toJustTable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(MortFeatureEntry)) == 0) {
		MortFeatureEntry returnValue = value.toMortFeatureEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(MorxContextualSubtable)) == 0) {
		MorxContextualSubtable returnValue = value.toMorxContextualSubtable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(JustPCActionSubrecord)) == 0) {
		JustPCActionSubrecord returnValue = value.toJustPCActionSubrecord;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(STEntryTwo)) == 0) {
		STEntryTwo returnValue = value.toSTEntryTwo;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(STXEntryOne)) == 0) {
		STXEntryOne returnValue = value.toSTXEntryOne;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KerxKerningPair)) == 0) {
		KerxKerningPair returnValue = value.toKerxKerningPair;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(MorxInsertionSubtable)) == 0) {
		MorxInsertionSubtable returnValue = value.toMorxInsertionSubtable;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(PropLookupSingle)) == 0) {
		PropLookupSingle returnValue = value.toPropLookupSingle;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(AnchorPoint)) == 0) {
		AnchorPoint returnValue = value.toAnchorPoint;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KernStateEntry)) == 0) {
		KernStateEntry returnValue = value.toKernStateEntry;
		[invocation setReturnValue: &returnValue];
		return YES;
	} else if (strcmp(type, @encode(KerxIndexArrayHeader)) == 0) {
		KerxIndexArrayHeader returnValue = value.toKerxIndexArrayHeader;
		[invocation setReturnValue: &returnValue];
		return YES;
	}